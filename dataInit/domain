什么是领域模型？
领域模型是关于某个特定业务领域的软件模型。通常，领域模型通过对象模型来实现，这些对象
同时包含了数据和行为，并且表达了准确的业务含义。

常见的问题：
接口业务意图不明确，实现本身增加了潜在的复杂性，领域对象只是一个数据持有器

"注射流感疫苗"的最佳模型：
"谁管呢？写代码就行了。":patient.setShotType(ShotTypes.TYPE_FLU);patient.setDose(dose);patient.setNurse(nurse);
"我们给病人注射流感疫苗。":patient.giveFluShot();
"护士给病人注射标准剂量的流感疫苗。":
Vaccine vaccine = vaccines.standardAdultFluDose();
nurse.administerFluVaccine(patient,vaccine);这才是我们想要的。


一个简单的案例：
需求：允许将每一个待订项提交到冲刺中。只有在一个待定项位于发布计划(Release)中时才能进行
提交。如果一个待定项已经提交到了另外一个冲刺中，那么需要先将其回收。提交完成时，通知相关
客户方。
public class BacklogItem extends Entity{
    private SprintId sprintId;
    private BacklogItemStatusType status;
    ...
    public void commitTo(Sprint aSprint){
        if(!this.isScheduledForRelease()){
            throw new IllegalStateException("must be scheduled for release to commit to sprint");
        }
        if(!this.isCommittedToSprint()){
            if(!aSprint.sprintId().equals(this.sprintId())){
                this.uncommitFromSprint();
            }
        }
        this.elevateStatuWith(BacklogItemStatus.COMMITTED);
        this.setSprintId(aSprint.sprintId());
        DomainEventPublisher.instance().publish(new BacklogItemCommitted(this.tenant(),this.backlogItemId(),this.sprintId()));
    }
    ...
}
此时的客户端代码如下：
backlogItem.commitTo(sprint);


SaaSOvation,它的产品对DDD的使用
CollabOvation这是一套企业协作软件，并且加入了社交网络的功能。该产品的功能包括论坛，共享日历，博客，即时消息，
留言板，文档管理，通知和提醒，活动跟踪和RSS等。
ProjectOvation主要用于敏捷项目的管理，使用Scrum作为项目管理方式，并且采用增量式的管理框架。该产品采用传统的Scrum
项目管理模型，包括产品，产品负责人，团队，待定项，计划发布和冲刺。



领域，子域，限界上下文
从广义上讲，领域即是一个组织所做的事情以及其中所包含的一切。

限界上下文是一个显示的边界，领域模型便存在于这个边界之内。领域模型是把通用语言表达成软件模型。
限界上下文主要是一个语义上的边界

领域中还同时存在问题空间和解决方案空间。在问题空间中，我们思考的是业务面临的挑战，而在
解决方案空间中，我们思考如何实现软件以解决这些业务挑战。


上下文映射图主要帮助我们从解决方案空间的角度看待问题。

处理资源不可用的一个好办法便是将器显现出来。考虑一下由标准类型实现的状态模式。此时的状态是一个值对象：
public enum DiscussionAvailability{
    ADD_ON_NOT_ENABLED,NOT_REQUESTED,REQUESTED,READY;
}
public final class Discussion implements Serializable{
    private DiscussionAvailability availability;
    private DiscussionDescriptor descriptor;
    ...
}
public class Product extends Entity{
    ...
    private Discussion discussion;
    ...
}

命令处理器通常只完成有限的功能。如果处理器拥有创建功能，那么它会创建一个新的聚合实例，然后
将该实例添加到资源库中。通常地，命令处理器将从源库中获取聚合实例，再调用该实例的行为方法：
@Transaction
public void commitBacklogItemToSprint(String aTenantId,String aBacklogItemId,String aSprintId){
    TenantId tenantId = new TenantId(aTenantId);
    BacklogItem backlogItem = backlogItemRepository.backlogItemOfId(tenantId,new BacklogItemId(aBacklogItemId));
    Sprint sprint = sprintRepository.sprintOfId(tenantId,new SprintId(aSprintId));
    backlogItem.commitTo(sprint);
}
命令模型（写模型）执行业务行为
命令模型上每个方法在执行完成时都将发布领域事件。以BacklogItem为例：
public class BacklogItem extends ConcurrencySafeEntity{
    ...
    public void commitTo(Sprint sprint){
        ...
        DomainEventPublisher.instance().publish(new BacklogItemCommitted(this.tenant(),this.backlogItemId(),this.sprintID()));
    }
    ...
}


事件驱动架构
事件驱动架构是一种用于处理事件的生成、发现和处理等任务的软件框架
基于消息的系统通常呈现出一种管道和过滤器风格。cat phone_numbers.txt | grep '303' | wc -l
如何通过创建消息发送方和接收方这样的组件来完成上例中电话号码过滤功能？
1.PhoneNumbersPublisher读取数据，发送AllPhoneNumbersListed事件
2.PhoneNumberFinder接收，发送PhoneNumberMatched事件
3.MatchPhoneNumberCounter接收，发送MatchedPhoneNumbersCounted事件
4.PhoneNumberExecutive接收，记录日志

分布式的并行处理模式--长时处理过程（Long-Running Process）
设计长时处理过程的不同方法
1.将处理过程设计成一个组合任务，使用一个执行组件对任务进行跟踪，并对各个步骤和任务完成情况精心持久化。
2.将处理过程设计成一组聚合，这些聚合在一些列的活动中相互协作。一个或多个聚合实例充当执行组件并维护整个处理过程的状态。
3.设计一个无状态的处理过程，其中每一个消息处理组件都将对所接收到的消息进行扩充--即向其中计入额外的数据信息--然后再将消息发送到下一个处理组件
此时并行处理长时处理过程存在一个问题，无法知道所接收到的领域事件是否来自统一并行处理过程？
在实际领域中，一个长时处理过程的执行器将创建一个新的类似聚合的状态对象来跟踪事前的完成情况。该状态
对象在处理过程开始时创建，它将与所有的领域事件共享一个唯一标识。同时，将处理过程开始时的时间戳保存在该状态对象中也是有好处的。

接下来看看一个实现了长时处理过程的函数是如何处理先前的电话号码例子的。这个处理过程将在复制缓存中并行执行，使用的是GemFire函数：
public class PhoneNumberCountSaga extends FunctionAdapter{
    @Override
    public void execute(FunctionContext context){
        Cache cache = CacheFactory.getAnyInstance();
        QueryService queryService = cache.getQueryService();
        String phoneNumberFilterQuery = (String)context.getArguments();
        ...
        //伪代码
        //-执行函数以获取MatchedPhoneNumbersCounted
        //-通过调用aggregator.sendResult(MatchedPhoneNumbersCounted)将答案发给聚合器
        //-执行函数以获取AllPhoneNumbersCounted
        //-通过调用aggregator.sendResult(AllPhoneNumbersCounted)将答案发给聚合器
        //-聚合器从每个分布式的函数返回中自动地收集答案，然后聚合
        //之后的单一答案发送给客户端
    }
}
客户端可以通过以下方式来并行地执行一个长时处理过程:
PhoneNumberCountProcess phoneNumberCountProcess = new PhoneNumberCountProcess();
String phoneNumberFilterQuery = "select phoneNumber from phoneNumberRegion pnr where pnr.areaCode = '303'";
Execution execution = FunctionService.onRegion(phoneNumberRegion).withFilter(0).withArgs(phoneNumberFilterQuery).withCollection(new PhoneNumberCountResultCollector());
PhoneNumberCountResultCollector resultsCollector = execution.execute(phoneNumberCountProcess);
List allPhoneNumberCountResults = (List)resultsCollector.getResult();

为什么使用实体
当需要考虑一个对象的个性特征，或者需要区分不同的对象时，引入实体这个领域概念。

验证类可以实现规范模式或策略模式。当发现非法状态时，验证类将通知客户方或者记录下验证结果以便后用。
验证过程应该搜集到所有的验证结果，而不是在一开始遇到非法状态时就抛出异常。
public abstract class Validator{
    private ValidationNotificationHandler notificationHandler;
    ...
    public Validator(ValidationNotificationHandler aHandler){
        super();
        this.setNotificationHandler(aHandler);
    }
    public abstract void validate();

    protected ValidationNotificationHandler notificationHandler(){
        return this.notificationHandler;
    }
    private void setNotificationHandler(ValidationNotificationHandler aHandler){
        this.notificationHandler = aHandler;
    }
}

public class WarbleValidator extends Validator{
    private Warble warble;
    public Validator(Warble aWarble,ValidationNotificationHandler aHandler){
        super(aHandler);
        this.setWarble(aWarble);
    }
    ...
    public void validate(){
        if(this.hasWarpedWarbleCondition(this.warble())){
            this.notificationHandler().handlerError("The warble is warped.");
        }
        if(this.hasWackyWarbleState(this.warble())){
            this.notificationHandler().handlerError("The warble has a wacky state");
        }
        ...
    }
}
class WarbleValidator extends Validator{
    ...
    public void validate(){
        if(this.hasWarpedWarbleCondition(this.warble())){
            this.notificationHandler().handleWarpedWarble();
        }
        if(this.hasWackyWarbleState(this.warble())){
            this.notificationHandler().handleWackyWarbleState();
        }
    }
    ...
}
跟踪变化
根据实体的定义，只需要跟踪哪些持续改变的状态。然而，有时领域专家可能会关心发生在模型中的一些重要
事件，此时便应该对实体的一些特殊变化进行跟踪了。
跟踪变化最实用的方法是领域事件和事件存储。我们为领域专家所关心的素有状态改变都创建单独的事件类型，
事件的名字和属性表名发生了什么样的事件。当命令操作执行完后，系统发出这些领域事件。事件的订阅方可以
接收发生在模型上的所有事件。在接收到事件后，订阅方将事件保存在事件存储中。

如何确定一个领域概念应该建模成一个之对象呢？
当你只关心某个对象的属性时，该对象便可作为一个值对象。为其添加有意义的属性，并赋予它相应的行为。
我们需要将值对象看成不变对象，不要给它任何身份标识，还应该尽量避免项实体对象一样的复杂性。

作为一个简单例子，考虑一个标识两种成员类型的标准类型。成员类型分别为为USER和GROUP（可以嵌套），在
java中可以使用枚举来标识该标准类型：
public enum GroupMemberType{
    GROUP {
        public boolean isGroup(){
            return true;
        }
    },
    USER {
        public boolean isUser(){
            return true;
        }
    };
    public boolean isGroup(){
        return false;
    }
    public boolean isUser(){
        return false;
    }
}
一个GroupMember值对象实例在初始化时接收一个GroupMemberType标准类型。当一个User或一个
Group被支配给了某个Group，完成指派操作的聚合应该创建正确的GroupMember：
protected GroupMember toGroupMember(){
    GroupMember groupMember =
    new GroupMember(this.tenantId(),
                    this.username(),
                    GroupMemberType.USER);  //枚举标准类型
    return groupMember;
}

public final class GroupMember extends IdentifiedValueObject{
    private String name;
    private TenantId tenantId;
    private GroupMemberType type;
    public GroupMember(
       TenantId aTenantId, String aName, GroupMemberType aType
    ){
        this();
        this.setName(aName);
        this.setTenantId(aTenantId);
        this.setType(aType);
        this.initialize();
    };
    ...
}
GroupMember是一个值对象，聚合实体Group维护了一个GroupMember的集合。我们可以通过值对象的委派主键
来标定某个GroupMember的实例，此时我们可以自由地将其映射成数据库实体，而同时在领域模型中将其建模
成值对象。Group类的部分代码如下：
public class Group extends Entity{
    private String description;
    private Set<GroupMember> groupMembers;
    private String name;
    private TenantId tenantId;

    public Group(TenantId aTenantId,String aName, String aDescription){
        this();
        this.setDescription(aDescription);
        this.setName(aName);
        this.setTenantId(aTenantId);
        this.initialize();
    }
    ...
    protected Group(){
        super();
        this.setGroupMembers(new HashSet<GroupMember>(0));
    }
    ...
}



